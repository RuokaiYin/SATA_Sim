import yaml
import shutil
import os
import subprocess

def extract_info(filename):
    with open(filename, 'r') as file:
        data = yaml.safe_load(file)

    architecture_name = data.get('architecture', {}).get('name', 'default')
    sram_info = {}
    dram_info = {}

    # Navigate through the architecture hierarchy
    subtrees = data.get('architecture', {}).get('subtree', [])
    for subtree in subtrees:
        locals_ = subtree.get('local', [])
        for local in locals_:
            attributes = local.get('attributes', {})
            
            # Extract SRAM info
            if attributes.get('kernel') == 'sram':
                name = local.get('name')
                if name:
                    sram_info[name] = {
                        "WIDTH": attributes.get('width'),
                        "BYTES": attributes.get('size-bytes'),
                        "BANK": attributes.get('bank')
                    }

            # Extract DRAM info
            if attributes.get('kernel') == 'dram':
                name = local.get('name')
                if name:
                    dram_info[name] = {
                        "WIDTH": attributes.get('width'),
                        "BYTES": attributes.get('size-bytes'),
                        "BANK": attributes.get('bank')
                    }

    return architecture_name, sram_info, dram_info

def generate_config_files(architecture_name, info, config_type):
    # Create directory if it doesn't exist
    output_dir = f"../cacti/{config_type}-config/{architecture_name}-{config_type}-configs"
    os.makedirs(output_dir, exist_ok=True)

    for name, attributes in info.items():
        # Copy default config to new file
        new_filename = os.path.join(output_dir, f"{config_type}-config-{name}.cfg")
        shutil.copy(f"../cacti/{config_type}-config/{config_type}-config.cfg", new_filename)

        # Replace placeholders with actual values
        with open(new_filename, 'r') as file:
            content = file.read()
            if config_type == "sram":
                content = content.replace('-size (bytes) y', f'-size (bytes) {attributes["BYTES"]}')
                content = content.replace('-UCA bank count z', f'-UCA bank count {attributes["BANK"]}')
                content = content.replace('-block size (bytes) i', f'-block size (bytes) {attributes["WIDTH"]}')
            elif config_type == "dram":
                content = content.replace('-size (bytes) y', f'-size (bytes) {attributes["BYTES"]}')
                content = content.replace('-UCA bank count z', f'-UCA bank count {attributes["BANK"]}')
                content = content.replace('-block size (bytes) i', f'-block size (bytes) {attributes["WIDTH"]}')

        # Write updated content back to the file
        with open(new_filename, 'w') as file:
            file.write(content)

def run_cacti_simulation(architecture_name, config_type):
    # Set the directory for the config files
    config_dir = f"../cacti/{config_type}-config/{architecture_name}-{config_type}-configs"
    
    # List all the config files in the directory
    config_files = [f for f in os.listdir(config_dir) if f.endswith('.cfg')]
    
    # Change directory to ../cacti
    os.chdir('../cacti')
    
    for config_file in config_files:
        # Construct the full path for the config file
        config_path = os.path.join(config_dir, config_file)
        
        # Construct the path for the output file
        out_path = os.path.join(config_dir, config_file.replace('.cfg', '.log'))
        
        print(f"Running Cacti simulation for {config_file}...")  # Debugging print
        
        # Run the Cacti command with tee
        subprocess.run(f'./cacti -infile {config_path} | tee {out_path}', shell=True)

        os.chdir(f'./{config_type}-config/{architecture_name}-{config_type}-configs')

        # Delete any .out files generated by Cacti in the current directory (if any)
        for file in os.listdir():
            if file.endswith('.out') or file.endswith('.cfg.out'):
                os.remove(file)
        os.chdir('../..')

def extract_dram_read_energy(architecture_name):
    # Set the directory for the log files
    log_dir = f"../cacti/dram-config/{architecture_name}-dram-configs"
    
    # List all the log files in the directory
    log_files = [f for f in os.listdir(log_dir) if f.endswith('.log')]
    
    # Dictionary to store read energy values
    dram_data = {"DRAM": []}
    
    for log_file in log_files:
        with open(os.path.join(log_dir, log_file), 'r') as file:
            lines = file.readlines()
            power_section_found = False
            for line in lines:
                if "Power Components" in line:
                    power_section_found = True
                if power_section_found and "Read energy" in line:
                    # Extract the value and store it
                    value = line.split(":")[-1].strip()
                    dram_name = log_file.replace("-dram-config.log", "")
                    dram_data["DRAM"].append({
                        "name": dram_name,
                        "Read energy": value
                    })
                    break

    # Save the extracted values to another file in YAML format
    with open("dram_read_energy_results.txt", 'w') as file:
        yaml.dump(dram_data, file)

if __name__ == "__main__":
    architecture_name, sram_data, dram_data = extract_info('sata-config.yaml')
    generate_config_files(architecture_name, sram_data, "sram")
    generate_config_files(architecture_name, dram_data, "dram")
    run_cacti_simulation(architecture_name, "sram")
    run_cacti_simulation(architecture_name, "dram")
    extract_dram_read_energy(architecture_name)
